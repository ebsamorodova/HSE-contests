#include <iostream>

struct Node  {
    int value;
    Node *next;

    Node(): value(0), next(NULL) {}

    explicit Node(int v_, Node *next_ = nullptr): value(v_), next(next_) {}
};

class List {
private:
    Node *root, *last;

    void push_back(Node *node) {
        node->next = NULL;
        if (root == NULL) {
            root = node;
            last = node;
        } else {
            last->next = node;
            last = node;
        }
    }

public:
    List() {
        root = NULL;
        last = root;
    }

    void push_back(int value) {
        Node* node = new Node(value);
        if (root == NULL) {
            root = node;
            last = node;
        } else {
            last->next = node;
            last = node;
        }
    }

    struct iterator {
        Node *v;

        iterator(Node* node) : v(node) {}

        iterator operator ++() {
            v = v->next;
            return v;
        }

        iterator operator + (int x) const {
            Node *node = v;
            while (x) {
                node = node->next;
                --x;
            }
            return node;
        }

        int operator - (iterator other) const {
            int dif = 0;
            while (*this != other) {
                ++dif;
                ++other;
            }
            return dif;
        }

        int& operator *() const {
            return v->value;
        }

        bool operator == (iterator other) const {
            return (*this).v == other.v;
        }

        bool operator != (iterator other) const {
            return (*this).v != other.v;
        }
    };

    iterator begin() const {
        return root;
    }

    iterator end() const {
        return last->next;
    }

    void push_back(iterator it) {
        push_back(it.v);
    }

    void clear() {
        Node *v = root;
        while (v != NULL) {
            Node *cur = v->next;
            delete v;
            v = cur;
        }
    }
};


List Merge(List::iterator start_a, List::iterator start_b) {
    List ans = List();
    while (start_a != NULL && start_b != NULL) {
        if (!(*start_b < *start_a)) {
            List::iterator tmp = start_a;
            ++start_a;
            ans.push_back(tmp);
        } else {
            List::iterator tmp = start_b;
            ++start_b;
            ans.push_back(tmp);
        }
    }
    while (start_a != NULL) {
        List::iterator tmp = start_a;
        ++start_a;
        ans.push_back(tmp);
    }
    while (start_b != NULL) {
        List::iterator tmp = start_b;
        ++start_b;
        ans.push_back(tmp);
    }
    return ans;
}

List::iterator MergeSort(List::iterator range_begin, List::iterator range_end) {
    if (range_end - range_begin < 2) {
        range_begin.v->next = NULL;
        return range_begin;
    }
    List::iterator range_middle = range_begin + (range_end - range_begin) / 2;
    range_begin = MergeSort(range_begin, range_middle);
    range_middle = MergeSort(range_middle, range_end);
    return Merge(range_begin, range_middle).begin();
}


int main() {
    size_t n;
    std::cin >> n;
    List v;
    int x;
    for (size_t i = 0; i != n; ++i) {
        std::cin >> x;
        v.push_back(x);
    }

    Node* elem = MergeSort(v.begin(), v.end()).v;
    while (elem != NULL) {
        std::cout << elem->value << " ";
        elem = elem->next;
    }
    v.clear();
    return 0;
}
